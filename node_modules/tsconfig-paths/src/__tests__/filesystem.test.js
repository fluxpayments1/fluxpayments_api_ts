"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const Filesystem = __importStar(require("../filesystem"));
const path = __importStar(require("path"));
describe("filesystem", () => {
    const fileThatExists = path.join(__dirname, "../../package.json");
    const fileThatNotExists = path.join(__dirname, "../../package2.json");
    it("should find file that exists, sync", () => {
        const result = Filesystem.fileExistsSync(fileThatExists);
        expect(result).toBe(true);
    });
    it("should not find file that not exists, sync", () => {
        const result = Filesystem.fileExistsSync(fileThatNotExists);
        expect(result).toBe(false);
    });
    it("should find file that exists, async", (done) => {
        Filesystem.fileExistsAsync(fileThatExists, (_err, result) => {
            try {
                expect(result).toBe(true);
                done();
            }
            catch (error) {
                done(error);
            }
        });
    });
    it("should not find file that not exists, async", (done) => {
        Filesystem.fileExistsAsync(fileThatNotExists, (_err, result) => {
            try {
                expect(result).toBe(false);
                done();
            }
            catch (error) {
                done(error);
            }
        });
    });
    it("should load json, sync", () => {
        const result = Filesystem.readJsonFromDiskSync(fileThatExists);
        expect(result);
        expect(result.main).toBe("lib/index.js");
    });
    it("should load json, async", (done) => {
        Filesystem.readJsonFromDiskAsync(fileThatExists, (_err, result) => {
            try {
                expect(result).toBeTruthy();
                expect(result.main).toBe("lib/index.js");
                done();
            }
            catch (error) {
                done(error);
            }
        });
    });
});
//# sourceMappingURL=filesystem.test.js.map