"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformFileAsync = exports.transformFileSync = exports.transformFile = void 0;
const gensync_1 = __importDefault(require("gensync"));
const index_ts_1 = __importDefault(require("./config/index.ts"));
const index_ts_2 = require("./transformation/index.ts");
const fs = __importStar(require("./gensync-utils/fs.ts"));
// Kind of gross, but essentially asserting that the exports of this module are the same as the
// exports of transform-file-browser, since this file may be replaced at bundle time with
// transform-file-browser.
({});
const transformFileRunner = (0, gensync_1.default)(function* (filename, opts) {
    const options = Object.assign(Object.assign({}, opts), { filename });
    const config = yield* (0, index_ts_1.default)(options);
    if (config === null)
        return null;
    const code = yield* fs.readFile(filename, "utf8");
    return yield* (0, index_ts_2.run)(config, code);
});
function transformFile(...args) {
    transformFileRunner.errback(...args);
}
exports.transformFile = transformFile;
function transformFileSync(...args) {
    return transformFileRunner.sync(...args);
}
exports.transformFileSync = transformFileSync;
function transformFileAsync(...args) {
    return transformFileRunner.async(...args);
}
exports.transformFileAsync = transformFileAsync;
//# sourceMappingURL=transform-file.js.map