"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveTargets = exports.resolveBrowserslistConfigFile = void 0;
const helper_compilation_targets_1 = __importDefault(require("@babel/helper-compilation-targets"));
function resolveBrowserslistConfigFile(
// eslint-disable-next-line @typescript-eslint/no-unused-vars
browserslistConfigFile, 
// eslint-disable-next-line @typescript-eslint/no-unused-vars
configFilePath) {
    return undefined;
}
exports.resolveBrowserslistConfigFile = resolveBrowserslistConfigFile;
function resolveTargets(options, 
// eslint-disable-next-line @typescript-eslint/no-unused-vars
root) {
    const optTargets = options.targets;
    let targets;
    if (typeof optTargets === "string" || Array.isArray(optTargets)) {
        targets = { browsers: optTargets };
    }
    else if (optTargets) {
        if ("esmodules" in optTargets) {
            targets = Object.assign(Object.assign({}, optTargets), { esmodules: "intersect" });
        }
        else {
            // https://github.com/microsoft/TypeScript/issues/17002
            targets = optTargets;
        }
    }
    return (0, helper_compilation_targets_1.default)(targets, {
        ignoreBrowserslistConfig: true,
        browserslistEnv: options.browserslistEnv,
    });
}
exports.resolveTargets = resolveTargets;
//# sourceMappingURL=resolve-targets-browser.js.map